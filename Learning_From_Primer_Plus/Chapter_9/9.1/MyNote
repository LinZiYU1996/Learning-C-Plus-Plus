
## 单独编译

和C语言一样，C++也允许甚至鼓励程序员将组件函数放在独立的文件中。第1章
介绍过，可以单独编译这些文件，然后将它们链接成可执行的程序。（通常，C++编
译器既编译程序，也管理链接器。）如果只修改了一个文件，则可以只重新编译该
文件，然后将它与其他文件的编译版本链接。

例如，假设程序员决定分解程序清单7.12中的程序，将支持函数放在一个独立
的文件中。清单7.12将直角坐标转换为极坐标，然后显示结果。不能简单地以
main( )之后的虚线为界，将原来的文件分为两个。问题在于，main( )和其他两个
函数使用了同一个结构声明，因此两个文件都应包含该声明。简单地将它们输入进
去无疑是自找麻烦。即使正确地复制了结构声明，如果以后要作修改，则必须记住
对这两组声明都进行修改。简而言之，将一个程序放在多个文件中将引出新的问
题。

谁希望出现更多的问题呢？C和C++的开发人员都不希望，因此他们提供了
（#include）来处理这种情况。与其将结构声明加入到每一个文件中，不如将其放在头
文件中，然后在每一个源代码文件中包含该头文件。这样，要修改结构声明时，只
需在头文件中做一次改动即可。另外，也可以将函数原型放在头文件中。因此，可
以将原来的程序分成三部分。

- 头文件：包含结构声明和使用这些结构的函数的原型。
- 源代码文件：包含与结构有关的函数的代码。
- 源代码文件：包含调用与结构相关的函数的代码。


这是一种非常有用的组织程序的策略。例如，如果编写另一个程序时，也需要
使用这些函数，则只需包含头文件，并将函数文件添加到项目列表或make列表中即
可。另外，这种组织方式也与OOP方法一致。一个文件（头文件）包含了用户定义类
型的定义；另一个文件包含操纵用户定义类型的函数的代码。这两个文件组成了一
个软件包，可用于各种程序中。


请不要将函数定义或变量声明放到头文件中。这样做对于简单的情况可能是可
行的，但通常会引来麻烦。例如，如果在头文件包含一个函数定义，然后在其他两
个文件（属于同一个程序）中包含该头文件，则同一个程序中将包含同一个函数的
两个定义，除非函数是内联的，否则这将出错。下面列出了头文件中常包含的内
容。

- 函数原型。
- 使用#define或const定义的符号常量。
- 结构声明。
- 类声明。
- 模板声明。
- 内联函数。

将结构声明放在头文件中是可以的，因为它们不创建变量，而只是在源代码文
件中声明结构变量时，告诉编译器如何创建该结构变量。同样，模板声明不是将被
编译的代码，它们指示编译器如何生成与源代码中的函数调用相匹配的函数定义。
被声明为const的数据和内联函数有特殊的链接属性（稍后将介绍），因此可以将其
放在头文件中，而不会引起问题。


**注意，在包含头文件时，我们使用“coordin.h”，而不是<coodin.h>。如果文件名包含在尖括号中，则C++编译器将在存储标准头文件的主机系统的文件系统中查找；但如果文件名包含在双引号中，则编译器将首先查找当
前的工作目录或源代码目录（或其他目录，这取决于编译器）。如果没有在那里找到头文件，则将在标准位置查找。因此在包含自己的头文件时，应使用引号而不是
尖括号。**



























